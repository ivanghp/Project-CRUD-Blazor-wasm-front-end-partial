@using BlazorTemplateDoc.Shared.Resources
@using System.Net.Http
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Popups
@using Syncfusion.EJ2.Blazor.Buttons
@using Syncfusion.EJ2.Blazor.DropDowns
@page "/createtemplate"
@inject HttpClient Http
@inject NavigationManager UriHelper

<h3>CreateTemplate</h3>

<EditForm Model="@templateSave">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <p>

            <label for="title" class="col-form-label-lg">Title:</label><br />
            <InputTextArea class="col-md-10" id="title" @bind-Value="@templateSave.Title" />

        </p>

        <p>
            <label for="content" class="col-form-label-lg">Content:</label><br />
            <InputTextArea class="col-md-10" id="content" @bind-Value="@templateSave.Content" />
        </p>
        <br />
        <p>
            <label for="validFrom" class="col-form-label col-sm-2">Valid From:</label>
            <InputDate id="validFrom" @bind-Value="@templateSave.ValidFrom" />
        </p>
        <p>
            <label class="col-form-label col-sm-2" for="validTo">Valid To:</label>
            <InputDate id="validTo" @bind-Value="@templateSave.ValidTo" />
        </p>
        <p>
            <label for="inUse" class="form-check-label col-sm-3">Template Is In Use:</label>
            <EjsCheckBox ID="inUse" @bind-Checked="@templateSave.IsInUse"></EjsCheckBox>
        </p>
        <p>
            <label class="form-check-label col-sm-3" for="isActive">Template Is Active:</label>
            <EjsCheckBox ID="isActive" @bind-Checked="@templateSave.IsActive"></EjsCheckBox>
        </p>
    </div>
    <hr />
    @*<button @onclick="@(()=>CreateTemplate(templateSave))">Create Template</button>*@
    <button class="btn btn-success ml-4 mr-4" @onclick="CTemplate">Create Template</button>

    <button class="btn btn-primary ml-4 mr-4" type="reset" @onclick="@Back">Back</button>
</EditForm>

<EditForm Model="@templateSave">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label for="name" class="col-form-label">Attribute Name:</label><br />
        <InputText class="col-md-10" id="name" @bind-Value="@attributeResource.Name" />
        <button class="btn btn-sm btn-success" type="submit" @onclick="(()=>AddAttributeToList(attributeResource))">Add Attribute Field</button>
        <button class="btn btn-sm btn-warning" type="submit" @onclick="AddAttributesToTemplate">Add Attributes to Template</button>
    </p>
</EditForm>
@foreach (var attribute in attributeResources)
{
    <p class="m-4">@(attribute.Name)<button class="btn btn-sm" @onclick="(()=>RemoveAttributeFromList(attributeResource))">Remove</button></p>
}

<EjsMultiSelect Value="@attrName" AllowCustomValue="true" DataSource="attributeResources">
    <MultiSelectEvents TValue="List<string>" ValueChange="AddAttributesMultiSelect"></MultiSelectEvents>
    <MultiSelectFieldSettings Value="Name"></MultiSelectFieldSettings>
</EjsMultiSelect>
<button class="btn btn-primary" @onclick="AddAttributesMultiSelect">Add Attributes</button>
<hr />
<p>paragraph</p>

<EjsDialog @ref="TempCreatedDialog" Width="550px" IsModal="true" @bind-Visible="@TempCreatedDialogVisible">
    <DialogEvents OnOverlayClick="Back">
    </DialogEvents>
    <DialogTemplates>
        <Content><h4> Create request for template <b> @templateSave.Title </b> was sent.</h4></Content>
    </DialogTemplates>
    <DialogButtons><DialogButton ButtonModel="@BackToListBtn" OnClick="@Back"></DialogButton></DialogButtons>
</EjsDialog>


@code {

    //[Parameter]
    //public bool Success { get; set; } = false;
    //[Parameter]
    //public SaveTemplateResource templateSave { get; set; }
    public SaveTemplateResource templateSave = new SaveTemplateResource();
    public SaveTemplateAttributeResource attributeResource = new SaveTemplateAttributeResource();
    public List<SaveTemplateAttributeResource> attributeResources = new List<SaveTemplateAttributeResource>();
    public string[] attrNames = new string[] { };
    public string attrName;
    EjsDialog TempCreatedDialog;
    bool TempCreatedDialogVisible;
    public Syncfusion.EJ2.Blazor.Buttons.ButtonModel BackToListBtn = new Syncfusion.EJ2.Blazor.Buttons.ButtonModel { Content = "Back to Templates List", IsPrimary = true };

    //public async Task CreateTemplate() //нешто не е во ред со овој метод, веројатно... не дава опис на еророт... SaveTemplateResource template
    //{
    //  Console.WriteLine("qwerty");
    //await Http.PostJsonAsync(@"api/templates", template);
    //Success = true;
    //}

    //protected async override Task OnInitializedAsync()
    //{
    //}
    public async Task CTemplate()
    {

        await Http.PostJsonAsync(@"api/templates", templateSave);
        Console.WriteLine(templateSave.Title);
        await CreateAttributes();
        TempCreatedDialog.Show();
    }

    //не рабтев дополнително на креирање атрибути, не функционираат...
    public async Task CreateAttributes()
    {
        foreach (var attr in templateSave.Attributes)
        {
            await Http.PostJsonAsync(@"api/templateattributes", attr); //wrong route fixed
            Console.WriteLine(attr.Name + " added to db");
        }
    }

    private void Back()
    {
        UriHelper.NavigateTo(@"/templates");
    }

    public void AddAttributeToList(SaveTemplateAttributeResource attr)
    {
        //attr.Template = templateSave;
        attributeResources.Add(attr);
        Console.WriteLine("attribute added");
    }

    public void RemoveAttributeFromList(SaveTemplateAttributeResource attrResource)
    {
        attributeResources.Remove(attrResource);
    }

    public void AddAttributesToTemplate()
    {
        Console.WriteLine("attributes");
        templateSave.Attributes = attributeResources;
        Console.WriteLine("attributes list added");
    }

    public void AddAttributesMultiSelect()
    {
        this.StateHasChanged();
        foreach (var item in attributeResources)
        {
            Console.WriteLine(item.Name);
        }
        //attributeResource.Name = attrName;
    }
}
